# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      # Replace with your solution name, i.e. MyWpfApp.sln.
      Solution_Name: src/DaxStudio.sln
      # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Test_Project_Path: tests/DaxStudio.Tests/DaxStudio.Tests.csproj
      # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      #Wap_Project_Directory: your-wap-project-directory-name
      # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
      #Wap_Project_Path: your-wap-project-path

      #solution: '**/*.sln'
      #buildDefinition: '**/*.msproj'
      #buildTarget: 'Installer'
      #buildPlatform: 'Any CPU'
      #buildConfiguration: 'Release'

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      # Execute all unit tests in the solution
      #- name: Execute unit tests
      #  run: dotnet test

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Build application
        run: msbuild $env:Solution_Name /t:Build /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      #- task: NuGetToolInstaller@0
      #
      #- task: NuGetCommand@2
      #  inputs:
      #    restoreSolution: '$(solution)'
      #    restoreDirectory: '$(Build.SourcesDirectory)\\packages'
      #
      #
      ## - task: VSBuild@1
      ##  inputs:
      ##    solution: '$(solution)'
      ##    platform: '$(buildPlatform)'
      ##    configuration: '$(buildConfiguration)'
      #- script: 'choco install innosetup -y'
      #
      #- task: MSBuild@1
      #  inputs:
      #    solution: '$(buildDefinition)'
      #    #msbuildLocationMethod: 'version' # Optional. Options: version, location
      #    #msbuildVersion: 'latest' # Optional. Options: latest, 15.0, 14.0, 12.0, 4.0
      #    msbuildArchitecture: '$(buildPlatform)' # Optional. Options: x86, x64
      #    #msbuildLocation: # Optional
      #    #platform: # Optional
      #    configuration: '$(buildConfiguration)' # Optional
      #    msbuildArguments: '/target:$(buildTarget)' # Optional
      #    #clean: false # Optional
      #    #maximumCpuCount: false # Optional
      #    #restoreNugetPackages: false # Optional
      #    #logProjectEvents: false # Optional
      #    #createLogFile: false # Optional
      #
      ## Need to refactor tests/code so they can work without a local SSAS instance
      ## - task: VSTest@2
      ##  inputs:
      ##    platform: '$(buildPlatform)'
      ##    configuration: '$(buildConfiguration)'
      #
      #- task: CopyFiles@2
      #  inputs:
      #    contents: package\*
      #    targetFolder: $(Build.ArtifactStagingDirectory)
      #
      #- task: PublishBuildArtifacts@1
      #  inputs:
      #    pathtoPublish: $(Build.ArtifactStagingDirectory)
      #    artifactName: DaxStudioSetup
